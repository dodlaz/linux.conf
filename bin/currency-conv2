#!/bin/bash


declare -A cur
cur["gbp"]="GBP"
cur["pund"]="GBP"
cur["£"]="GBP"
cur["sek"]="SEK"
cur["kr"]="SEK"
cur["usd"]="USD"
cur["dollar"]="USD"
cur["$"]="USD"
cur["eur"]="EUR"
cur["euro"]="EUR"
cur["€"]="EUR"
cur["btc"]="BTC"
cur["bitcoin"]="BTC"
cur["฿"]="BTC"

ColorOff='\033[0m'
Color='\033[1;31m'

#Flags
flagSelf=false
flagNewLine=false

currency() {
    if ! [[ $1 = *[[:digit:]]* && $2 != "" && $3 != "" ]]; then
        echo "Error" >&2
        exit 3
    fi
    f=false

    #From
    for e in $2; do
        b="${cur[${e,,}]}"
        if [ -z $b ]; then
            b="${e^^}"
        fi

        #new line
        if [[ "$flagNewLine" == true && "$f" == true ]]; then
            echo ""
        fi
        f=true

        #To
        for n in $3; do
            c="${cur[${n,,}]}"
            if [ -z $c ]; then
                c="${n^^}"
            fi    
            if [[ "$b" != "$c" ]]; then
                result="$(wget -qO- "http://www.google.com/finance/converter?a=$1&from=$b&to=$c" |  sed '/res/!d;s/<[^>]*>//g')";
                if [[ "$result" != "" ]]; then
                    echo -ne "$Color$(echo -n $result | cut -d' ' -f1) $ColorOff"
                    echo -ne "$(echo $result | cut -d' ' -f2-3)"
                    echo -ne "$Color $(echo -n $result | cut -d' ' -f4) $ColorOff"
                    echo -ne $result | cut -d' ' -f5-
                else
                    echo "Error: Converting $b to $c" >&2
                fi
            fi
            
            #X -> X
            if [[ "$b" == "$c" && "$flagSelf" == true ]]; then
                echo -e "$Color$1$ColorOff $b = $Color$1$ColorOff $c"
            fi
        done        
    done
}

HELP() {
    echo -e "Help:\ncurrency-conv [OPTION]... [VALUE] [[FROM] [TO]]"
    exit 0;
}
LIST() {
    echo -e "Swedish Krona: \t ${Color}SEK${ColorOff} (${Color}kr${ColorOff})"
    echo -e "USE Dollar: \t ${Color}USD${ColorOff} (${Color}\$${ColorOff})"
    echo -e "British Pound: \t ${Color}GBP${ColorOff} (${Color}£${ColorOff})"
    echo -e "European Euro: \t ${Color}EUR${ColorOff} (${Color}€${ColorOff})"
    echo -e "Bitcoin: \t ${Color}BTC${ColorOff} (${Color}฿${ColorOff})";
    exit 0;
}


while getopts ':v:f:t:hlsrn' flag; do
  case "${flag}" in

    n) flagNewLine=true ;;
    s) flagSelf=true ;;
    r) Color='' ;;

    h) HELP;;
    l) LIST;;
    
    v) value=${OPTARG} ;;
    f) from=${OPTARG}  ;;
    t) to=${OPTARG}    ;;
    
    *)
        echo -e "Unexpected option ${flag}" >&2;
        exit 1;
        ;;
  esac
done
shift $((OPTIND-1))




args=( "$@" )
n=0
if [ -z "$value" ]; then
   value="${args[$n]}"
   ((n++))
fi
if [ -z "$from" ]; then
   from="${args[$n]}"
   ((n++))
fi
if [ -z "$to" ]; then
   to="${args[$n]}"
   ((n++))
fi

# Check if amount is a nubber
if [[ $value == "" ]]; then
    value=1 #defult amount 1
elif ! [[ $value = *[[:digit:]]* ]] ; then
   echo "Error: Not a number" >&2
   exit 2
else
    value="$(echo $value | bc -l)"
fi



if [[ $value != "" && $from != "" && $to != "" ]]; then
    currency $value "$from" "$to"
elif [[ $value != "" && $from != "" ]]; then
    currency $value "$from" "SEK USD EUR GBP BTC"
elif [[ $value != "" ]]; then
    currency $value "SEK USD EUR GBP BTC" "SEK"            
fi






